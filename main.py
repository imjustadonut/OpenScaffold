os = __import__("os")
sys = __import__("sys")
time = __import__("time")
random = __import__("random")

scaffold = []
templates = [
    {"name": "Python", "scaffold": [
        {"type": "file", "name": "main.py", "content": "os = __import__(\"os\")\nsys = __import__(\"sys\")\ntime = __import__(\"time\")\nrandom = __import__(\"random\")\n\nprint(\"Welcome to your first python project!\")"},
        {"type": "dir", "name": "scripts", "children": [
            {"type": "file", "name": "script.py", "content": "# This is a script file. It can be called from any file using the 'import' keyword.\n\nclass Script:\n    def __init__(self):\n        print(\"Script file created!\")"}
        ]},
        {"type": "file", "name": "README.md", "content": "# Python Project\n\nThis is a python project created using the scaffold tool."},
        {"type": "file", "name": "requirements.txt", "content": "# Add any dependencies for your project here. To install all of them at the same time, use 'python -m pip install -r requirements.txt' in the terminal."}
    ]},
    {"name": "Javascript", "scaffold": [
        {"type": "file", "name": "index.js", "content": "console.log(\"Welcome to your first javascript project!\")"},
        {"type": "file", "name": "package.json", "content": "{\n    \"name\": \"javascript-project\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A javascript project created using the scaffold tool.\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"ISC\"\n}"},
        {"type": "file", "name": "README.md", "content": "# Javascript Project\n\nThis is a javascript project created using the scaffold tool."},
        {"type": "file", "name": ".gitignore", "content": "# Add any files or directories you would like to ignore in your project here."},
        {"type": "file", "name": "package-lock.json", "content": "This file is automatically generated by npm and should not be modified. When you run 'npm install', this file will be updated with the latest versions of the dependencies in your project."},
        {"type": "dir", "name": "config", "children": [
            {"type": "file", "name": "main.json", "content": "{\n    \"config\": \"value\"\n}"},
        ]},
    ]},
    {"name": "HTML/CSS", "scaffold": [
        {"type": "file", "name": "index.html", "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HTML/CSS Project</title>\n</head>\n<body>\n    <h1>Welcome to your first HTML/CSS project!</h1>\n</body>\n</html>"},
        {"type": "file", "name": "styles.css", "content": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    color: #333;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    text-align: center;\n    margin-top: 100px;\n}"},
        {"type": "file", "name": "README.md", "content": "# HTML/CSS Project\n\nThis is an HTML/CSS project created using the scaffold tool."},
        {"type": "dir", "name": "images", "children": []},
        {"type": "dir", "name": "scripts", "children": [
            {"type": "file", "name": "script.js", "content": "// This is a javascript file that can be linked to the HTML file using the 'script' tag.\n\nconsole.log(\"Script file created!\")"},
        ]},
    ]},
    {"name": "new_custom", "scaffold": [
        {"type": "file", "name": "main.py", "content": "os = __import__(\"os\")\nsys = __import__(\"sys\")\ntime = __import__(\"time\")\nrandom = __import__(\"random\")\n\nprint(\"Welcome to your first python project!\")"},
        {"type": "dir", "name": "scripts", "children": [
            {"type": "file", "name": "script.py", "content": "# This is a script file. It can be called from any file using the 'import' keyword.\n\nclass Script:\n    def __init__(self):\n        print(\"Script file created!\")"}
        ]},
        {"type": "file", "name": "README.md", "content": "# Python Project\n\nThis is a python project created using the scaffold tool."},
        {"type": "file", "name": "requirements.txt", "content": "# Add any dependencies for your project here. To install all of them at the same time, use 'python -m pip install -r requirements.txt' in the terminal."}
    ]},
]

def createScaffold(scaffold, directory=""):
    if directory != "":
        os.mkdir(directory)
        os.chdir(directory)
    for item in scaffold:
        if item["type"] == "dir":
            os.mkdir(item["name"])
            os.chdir(item["name"])
            createScaffold(item["children"])
            os.chdir("..")
        elif item["type"] == "file":
            with open(item["name"], "w") as file:
                file.write(item["content"])


def scaffoldProject():
    options = input("Would you like to choose a template, or customize it on your own? (choose/customize): ")
    if options.lower() == "customize":
        print(__import__("colorama").Fore.RED+"To customize a new scaffold, add it to the scaffolds list in the main.py (THIS) file!"+__import__("colorama").Fore.RESET+"")
        scaffoldProject()
    elif options.lower() == "choose":
        print("Please select one of the following: ")
        for template in templates:
            print(template["name"])
        selectedTemplate = input("Enter the name of the template you would like to use: ")
        for template in templates:
            if selectedTemplate.lower() == template["name"].lower():
                scaffold = template["scaffold"]
                dir = input("Enter the directory you would like to create the project in: (current directory if left blank): ")
                if dir == "":
                    createScaffold(scaffold)
                else:
                    createScaffold(scaffold, dir)
            else:
                continue
    else:
        print("Invalid option. Please try again.")
        scaffoldProject()

def start():
    requestStart = input("Would you like to start scaffolding a project? (y/n): ")
    if requestStart.lower() == "y":
        scaffoldProject()
    else:
        print("Goodbye!")
        sys.exit()

start()